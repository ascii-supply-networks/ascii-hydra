@misc{dagster,
  author = {Dagster},
  title = {Dagster | Cloud-native Orchestration of Data Pipelines},
  year = {2018},
  publisher = {GitHub},
  journal = {GitHub repository},
  url = {https://github.com/dagster-io/dagster}
}
@article{Anil,
title = {Pattern-based serverless data processing pipelines for Function-as-a-Service orchestration systems},
journal = {Future Generation Computer Systems},
volume = {154},
pages = {87-100},
year = {2024},
issn = {0167-739X},
doi = {10.1016/j.future.2023.12.026},
url = {https://www.sciencedirect.com/science/article/pii/S0167739X23004855},
author = {Anil Mathew and Vasilios Andrikopoulos and Frank J. Blaauw and Dimka Karastoyanova},
keywords = {Serverless, Enterprise integration patterns, Workflow patterns, Function-as-a-Service (FaaS), Function orchestration},
abstract = {The serverless cloud computing execution model presents an opportunity for implementing data processing pipelines in a cost efficient manner with minimum or no consideration about managing their operational aspects. In doing so, however, a major concern that emerges is the adoption of provider-specific languages required for orchestrating serverless functions and supporting services into the higher order logic of pipelines. As a result, the vendor lock-in problem inherent to cloud computing becomes further intensified. In this work we propose an approach to mitigate this issue through the adoption and adaptation of well-known patterns from the literature as the means for modeling the pipeline logic. By providing mappings from these patterns to vendor-specific orchestration language constructs we allow for efficient realization of provider-agnostic pipeline models as provider-specific executable workflows. An industrial case study provides evidence towards the suitability of our proposal for practical purposes.}
}
@article{Zaharia,
author = {Zaharia, Matei and Xin, Reynold S. and Wendell, Patrick and Das, Tathagata and Armbrust, Michael and Dave, Ankur and Meng, Xiangrui and Rosen, Josh and Venkataraman, Shivaram and Franklin, Michael J. and Ghodsi, Ali and Gonzalez, Joseph and Shenker, Scott and Stoica, Ion},
title = {Apache Spark: a unified engine for big data processing},
year = {2016},
issue_date = {November 2016},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {59},
number = {11},
issn = {0001-0782},
url = {https://doi.org/10.1145/2934664},
doi = {10.1145/2934664},
abstract = {This open source computing framework unifies streaming, batch, and interactive big data workloads to unlock new applications.},
journal = {Commun. ACM},
month = {oct},
pages = {56–65},
numpages = {10}
}
@inproceedings{Daw,
author = {Daw, Nilanjan and Bellur, Umesh and Kulkarni, Purushottam},
title = {Speedo: Fast dispatch and orchestration of serverless workflows},
year = {2021},
isbn = {9781450386388},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3472883.3486982},
doi = {10.1145/3472883.3486982},
abstract = {Structuring cloud applications as collections of interacting fine-grained microservices makes them scalable and affords the flexibility of hot upgrading parts of the application. The current avatar of serverless computing (FaaS) with its dynamic resource allocation and auto-scaling capabilities make it the deployment model of choice for such applications. FaaS platforms operate with user space dispatchers that receive requests over the network and make a dispatch decision to one of multiple workers (usually a container) distributed in the data center. With the granularity of microservices approaching execution times of a few milliseconds combined with loads approaching tens of thousands of requests a second, having a low dispatch latency of less than one millisecond becomes essential to keep up with line rates. When these microservices are part of a workflow making up an application, the orchestrator that coordinates the sequence in which microservices execute also needs to operate with microsecond latency. Our observations reveal that the most significant component of the dispatch/orchestration latency is the time it takes for the request to traverse into and out of the user space from the network. Motivated by the presence of a multitude of low power cores on today's SmartNICs, one approach to keeping up with these high line rates and the stringent latency expectations is to run both the dispatcher and the orchestrator close to the network on a SmartNIC. Doing so will save valuable cycles spent in transferring requests to and back from the user space. The operating characteristics of short-lived ephemeral state and low CPU burst requirements of FaaS dispatcher/orchestrator make them ideal candidates for offloading from the server to the NIC cores. This also brings other benefit of freeing up the server CPU. In this paper, we present Speedo--- a design for offloading of FaaS dispatch and orchestration services to the SmartNIC from the user space. We implemented Speedo on ASIC based Netronome Agilio SmartNICs and our comprehensive evaluation shows that Speedo brings down the dispatch latency from ~150ms to ~140μs at a load of 10K requests per second.},
booktitle = {Proceedings of the ACM Symposium on Cloud Computing},
pages = {585–599},
numpages = {15},
keywords = {serverless workflows, programmable SmartNIC, orchestration},
location = {Seattle, WA, USA},
series = {SoCC '21}
}
@inproceedings{Behm,
author = {Behm, Alexander and Palkar, Shoumik and Agarwal, Utkarsh and Armstrong, Timothy and Cashman, David and Dave, Ankur and Greenstein, Todd and Hovsepian, Shant and Johnson, Ryan and Sai Krishnan, Arvind and Leventis, Paul and Luszczak, Ala and Menon, Prashanth and Mokhtar, Mostafa and Pang, Gene and Paranjpye, Sameer and Rahn, Greg and Samwel, Bart and van Bussel, Tom and van Hovell, Herman and Xue, Maryann and Xin, Reynold and Zaharia, Matei},
title = {Photon: A Fast Query Engine for Lakehouse Systems},
year = {2022},
isbn = {9781450392495},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3514221.3526054},
doi = {10.1145/3514221.3526054},
pages = {2326–2339},
numpages = {14},
keywords = {main memory engines, query processing, vectorization},
location = {Philadelphia, PA, USA},
series = {SIGMOD '22}
}
@article{Heiler, 
  title={Cost efficient alternative to databricks lock-in}, 
  url={https://georgheiler.com/2024/06/21/cost-efficient-alternative-to-databricks-lock-in/}, 
  author={Heiler, Georg and Picatto, Hernan}, 
  year={2024}, 
  month={May},
  urldate = {2024-5-9}} 

@article{kinne,
  title={Web mining for innovation ecosystem mapping: a framework and a large-scale pilot study},
  author={Kinne, Jan and Axenbeck, Janna},
  journal={Scientometrics},
  volume={125},
  number={3},
  pages={2011--2041},
  year={2020},
  publisher={Springer},
  doi={10.1007/s11192-020-03726-9},
  url={https://doi.org/10.1007/s11192-020-03726-9}
}
@article{kumar,
  title={Vendor Lock-In Situation and Threats in Cloud Computing},
  author={Purushottam Kumar and Prakash Kumar},
  journal={International Journal of Innovative Science and Research Technology},
  volume={7},
  number={9},
  pages={1437-1441},
  year={2022},
  publisher={IJISRT},
  issn={2456-2165},
  doi={10.5281/zenodo.7196590},
  url={https://doi.org/10.5281/zenodo.7196590}
}